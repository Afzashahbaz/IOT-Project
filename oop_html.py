# -*- coding: utf-8 -*-
"""Oop.html

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lj2Pb25POib4pvq1AfAETwu_el1rP50X
"""

#CLASS
class Car:
    def __init__(self, make, model, year):
           self.make = make
           self.model = model
           self.year = year
    def start(self):
           print(f"The {self.year} {self.make} {self.model} is starting.")

#OBJECT
my_car = Car("Toyota", "Corolla", 2022)
my_car.start()

#ENCAPSULATION
class Person:
    def __init__(self, name, age):
           self.name = name  # Public attribute
           self.__age = age  # Private attribute
    def get_age(self):
           return self.__age
P1 = Person("Afza", 22)
P1.get_age()

#INHERITANCE
class Animal:
    def speak(self):
     print("Animal speaks")

class Dog(Animal):
    def bark(self):
      print("Dog barks")
dog = Dog()
dog.speak()  # Inherited method
dog.bark()  # Child class method

#POLYMORPHISM
class Animal:
    def speak(self):
        print("Animal speaks")

class Dog(Animal):
    def speak(self):
        print("Dog barks")

class Cat(Animal):
    def speak(self):
        print("Cat meows")

def animal_sound(animal):
    animal.speak()  # Calls the correct method depending on the object type

dog = Dog()
cat = Cat()

animal_sound(dog)
animal_sound(cat)

#ABSRACTION
from abc import ABC, abstractmethod
class Shape(ABC):
       @abstractmethod
       def area(self):
           pass
class Circle(Shape):
       def __init__(self, radius):
           self.radius = radius
       def area(self):
           return 3.14 * (self.radius ** 2)
circle = Circle(5)
print(circle.area())